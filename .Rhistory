makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(solve)
getInverse <- function() m
list(set=set, get=get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function will retrieve the inverse of a matrix from cache
## if it has already been calculated and has not changed, otherwise
## the inverse of a matrix will be calculated and returned
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
z <- matrix(c(1,2,3,4), nrows=2, ncols=2)
z <- matrix(c(1,2,3,4))
z
z <- matrix(c(1,2,3,4), nrow=2, ncol=2)
z
a <- matrix(c(1,2,3,4), nrow=2, ncol=2)
a <- makeCacheMatrix(z)
?getmean
?setmean
?setmean()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set=set, get=get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function will retrieve the inverse of a matrix from cache
## if it has already been calculated and has not changed, otherwise
## the inverse of a matrix will be calculated and returned
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
a <- makeCacheMatrix(z)
a$get()
a$getInverse()
cacheSolve(a)
a$getInverse()
cacheSolve(a)
a$set(matrix(c(2,4,6,8),nrow=2,ncol=2))
a$getInverse()
cacheSolve(a)
cacheSolve(a)
a$get()
a$setInverse(0)
a$getInverse()
a$get()
cacheSolve(a)
a <- makeCacheMatrix(matrix(c(10,20,30,40),))
a <- makeCacheMatrix(matrix(c(10,20,30,40),nrow=2,ncol=2))
a$get()
cacheSolve(a)
cacheSolve(a)
a <- makeCacheMatrix(z)
a$get()
cacheSolve(a)
a$getInverse()
cacheSolve(a)
a$set(matrix(c(0,5,99,66),nrow=2,ncol=2))
cacheSolve(a)
a$get()
a$getInverse()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set=set, get=get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function will retrieve the inverse of a matrix from cache
## if it has already been calculated and has not changed, otherwise
## the inverse of a matrix will be calculated and returned
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix(z)
a$get()
a$getinverse()
cacheSolve(a)
a$getinverse()
cacheSolve(a)
a$set(matrix(2,4,6,8),nrow=2,ncol=2)
a$set(matrix(c(2,4,6,8),nrow=2,ncol=2))
cacheSolve(a)
cacheSolve(a)
a$getinverse()
q()
